//
//  LogoSpinner.swift
//  Animation
//
//  Created by Vlad Zagorodnyuk on 6/23/16.
//  Copyright Â© 2016 Red Circle Games. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit

class LogoSpinner: NSObject {
    
    class func showPath(label: String, path: UIBezierPath) {
        let graph = UIBezierPath()
        let r = 40
        graph.moveToPoint(CGPoint(x:0,y:r))
        graph.addLineToPoint(CGPoint(x:0,y:-r))
        graph.moveToPoint(CGPoint(x:-r,y:0))
        graph.addLineToPoint(CGPoint(x:r,y:0))
        graph.appendPath(path)
    }
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawLoadingScreenIPhone6(frame frame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .AspectFit)->  [UIBezierPath]?{
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        var linesArray = [UIBezierPath]()
        
        /// Resize To Frame
        CGContextSaveGState(context)
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: frame)
        CGContextTranslateCTM(context, resizedFrame.minX, resizedFrame.minY)
        let resizedScale = CGSize(width: resizedFrame.width / 375, height: resizedFrame.height / 667)
        CGContextScaleCTM(context, resizedScale.width, resizedScale.height)
        
        /// Lines
        do {
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 41, 179)
            
            /// Line
            let line = UIBezierPath()
            line.moveToPoint(CGPoint(x: 0.5, y: 0.5))
            line.addLineToPoint(CGPoint(x: 256.5, y: 171.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 17, 68)
            line.lineCapStyle = .Square
            line.lineWidth = 1
            UIColor.magentaColor().setStroke()
            line.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line)
            
            /// Line
            let line2 = UIBezierPath()
            line2.moveToPoint(CGPoint(x: 0.5, y: 0.5))
            line2.addLineToPoint(CGPoint(x: 221.5, y: 194.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 36, 58)
            line2.lineCapStyle = .Square
            line2.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line2.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line2)
            
            /// Line
            let line3 = UIBezierPath()
            line3.moveToPoint(CGPoint(x: 0.5, y: 0.5))
            line3.addLineToPoint(CGPoint(x: 185.5, y: 212.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 53, 48)
            line3.lineCapStyle = .Square
            line3.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line3.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line3)
            
            /// Line
            let line4 = UIBezierPath()
            line4.moveToPoint(CGPoint(x: 0.5, y: 0.5))
            line4.addLineToPoint(CGPoint(x: 153.5, y: 231.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 69, 38)
            line4.lineCapStyle = .Square
            line4.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line4.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line4)
            
            /// Line
            let line5 = UIBezierPath()
            line5.moveToPoint(CGPoint(x: 0.5, y: 0.5))
            line5.addLineToPoint(CGPoint(x: 122.5, y: 248.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 85, 30)
            line5.lineCapStyle = .Square
            line5.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line5.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line5)
            
            /// Line
            let line6 = UIBezierPath()
            line6.moveToPoint(CGPoint(x: 0.5, y: 0.5))
            line6.addLineToPoint(CGPoint(x: 91.5, y: 270.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 100, 18)
            line6.lineCapStyle = .Square
            line6.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line6.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line6)
            
            /// Line
            let line7 = UIBezierPath()
            line7.moveToPoint(CGPoint(x: 0.5, y: 0.5))
            line7.addLineToPoint(CGPoint(x: 56.5, y: 285.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 118, 12)
            line7.lineCapStyle = .Square
            line7.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line7.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line7)
            
            /// Line
            let line8 = UIBezierPath()
            line8.moveToPoint(CGPoint(x: 0.5, y: 0.5))
            line8.addLineToPoint(CGPoint(x: 20.5, y: 308.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 136, 0)
            line8.lineCapStyle = .Square
            line8.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line8.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line8)
            
            /// Line
            let line9 = UIBezierPath()
            line9.moveToPoint(CGPoint(x: 20.5, y: 0.5))
            line9.addLineToPoint(CGPoint(x: 0.5, y: 308.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 136, 0)
            line9.lineCapStyle = .Square
            line9.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line9.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line9)
            
            /// Line
            let line10 = UIBezierPath()
            line10.moveToPoint(CGPoint(x: 57.5, y: 0.5))
            line10.addLineToPoint(CGPoint(x: 0.5, y: 286.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 117, 12)
            line10.lineCapStyle = .Square
            line10.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line10.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line10)
            
            /// Line
            let line11 = UIBezierPath()
            line11.moveToPoint(CGPoint(x: 90.5, y: 0.5))
            line11.addLineToPoint(CGPoint(x: 0.5, y: 266.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 101, 21)
            line11.lineCapStyle = .Square
            line11.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line11.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line11)
            
            /// Line
            let line12 = UIBezierPath()
            line12.moveToPoint(CGPoint(x: 122.5, y: 0.5))
            line12.addLineToPoint(CGPoint(x: 0.5, y: 248.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 85, 30)
            line12.lineCapStyle = .Square
            line12.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line12.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line12)
            
            /// Line
            let line13 = UIBezierPath()
            line13.moveToPoint(CGPoint(x: 153.5, y: 0.5))
            line13.addLineToPoint(CGPoint(x: 0.5, y: 230.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 69, 40)
            line13.lineCapStyle = .Square
            line13.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line13.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line13)
            
            /// Line
            let line14 = UIBezierPath()
            line14.moveToPoint(CGPoint(x: 185.5, y: 0.5))
            line14.addLineToPoint(CGPoint(x: 0.5, y: 211.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 53, 49)
            line14.lineCapStyle = .Square
            line14.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line14.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line14)
            
            /// Line
            let line15 = UIBezierPath()
            line15.moveToPoint(CGPoint(x: 221.5, y: 0.5))
            line15.addLineToPoint(CGPoint(x: 0.5, y: 194.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 36, 57)
            line15.lineCapStyle = .Square
            line15.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line15.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line15)
            
            /// Line
            let line16 = UIBezierPath()
            line16.moveToPoint(CGPoint(x: 256.5, y: 0.5))
            line16.addLineToPoint(CGPoint(x: 0.5, y: 171.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 18, 69)
            line16.lineCapStyle = .Square
            line16.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line16.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line16)
            
            /// Line
            let line17 = UIBezierPath()
            line17.moveToPoint(CGPoint(x: 276, y: 0))
            line17.addLineToPoint(CGPoint(x: 0, y: 136))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 7.5, 87.5)
            line17.lineCapStyle = .Square
            line17.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line17.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line17)
            
            /// Line
            let line18 = UIBezierPath()
            line18.moveToPoint(CGPoint(x: 277, y: 0))
            line18.addLineToPoint(CGPoint(x: 0.5, y: 93.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 8, 108)
            line18.lineCapStyle = .Square
            line18.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line18.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line18)
            
            /// Line
            let line19 = UIBezierPath()
            line19.moveToPoint(CGPoint(x: 277, y: 0))
            line19.addLineToPoint(CGPoint(x: 0.5, y: 55.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 8, 127)
            line19.lineCapStyle = .Square
            line19.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line19.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line19)
            
            /// Line
            let line20 = UIBezierPath()
            line20.moveToPoint(CGPoint(x: 277, y: 0))
            line20.addLineToPoint(CGPoint(x: 0.5, y: 18.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 8, 146)
            line20.lineCapStyle = .Square
            line20.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line20.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line20)
            
            /// Line
            let line21 = UIBezierPath()
            line21.moveToPoint(CGPoint(x: 277, y: 19))
            line21.addLineToPoint(CGPoint(x: 0.5, y: 0.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 8, 145)
            line21.lineCapStyle = .Square
            line21.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line21.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line21)
            
            /// Line
            let line22 = UIBezierPath()
            line22.moveToPoint(CGPoint(x: 285, y: 58))
            line22.addLineToPoint(CGPoint(x: 0.5, y: 0.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 0, 125)
            line22.lineCapStyle = .Square
            line22.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line22.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line22)
            
            /// Line
            let line23 = UIBezierPath()
            line23.moveToPoint(CGPoint(x: 276, y: 95))
            line23.addLineToPoint(CGPoint(x: 0.5, y: 0.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 8, 107)
            line23.lineCapStyle = .Square
            line23.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line23.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line23)
            
            /// Line
            let line24 = UIBezierPath()
            line24.moveToPoint(CGPoint(x: 277, y: 137))
            line24.addLineToPoint(CGPoint(x: 0.5, y: 0.5))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 8, 86)
            line24.lineCapStyle = .Square
            line24.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line24.stroke()
            CGContextRestoreGState(context)
            
            linesArray.append(line)
            
            CGContextRestoreGState(context)
        }
        
        /// Polygon 1
        let polygon1 = UIBezierPath()
        polygon1.moveToPoint(CGPoint(x: 69, y: 0))
        polygon1.addLineToPoint(CGPoint(x: 138, y: 39.75))
        polygon1.addLineToPoint(CGPoint(x: 138, y: 119.25))
        polygon1.addLineToPoint(CGPoint(x: 69, y: 159))
        polygon1.addLineToPoint(CGPoint(x: 0, y: 119.25))
        polygon1.addLineToPoint(CGPoint(x: 0, y: 39.75))
        polygon1.addLineToPoint(CGPoint(x: 69, y: 0))
        polygon1.closePath()
        polygon1.moveToPoint(CGPoint(x: 69, y: 0))
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 118, 254)
        UIColor(white: 0.847, alpha: 1).setFill()
        polygon1.fill()
        polygon1.lineWidth = 1
        UIColor(white: 0.592, alpha: 1).setStroke()
        polygon1.stroke()
        CGContextRestoreGState(context)
        
        CGContextRestoreGState(context)
        
        return linesArray
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfLoadingScreenIPhone6(size size: CGSize = CGSize(width: 375, height: 667), resizing: ResizingBehavior = .AspectFit) -> UIImage {
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        LogoSpinner.drawLoadingScreenIPhone6(frame: CGRect(origin: CGPoint.zero, size: size), resizing: resizing)
        image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case AspectFit /// The content is proportionally resized to fit into the target rectangle.
        case AspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case Stretch /// The content is stretched to match the entire target rectangle.
        case Center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .AspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .AspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .Stretch:
                    break
                case .Center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
